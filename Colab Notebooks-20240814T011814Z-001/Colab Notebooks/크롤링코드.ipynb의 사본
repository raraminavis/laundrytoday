{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1ksQQYzWO1sBYgDc4FXRvlvO_UcnIceEj","timestamp":1717640852933}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":24,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DdWTBUSPs41p","executionInfo":{"status":"ok","timestamp":1717643765609,"user_tz":-540,"elapsed":294867,"user":{"displayName":"김민경","userId":"05552883468747004724"}},"outputId":"e2f8fa0c-2aa0-49fd-b851-0a2a07379799"},"outputs":[{"output_type":"stream","name":"stderr","text":["Processing songs: 100%|██████████| 100/100 [04:52<00:00,  2.92s/it]\n"]}],"source":["import re\n","import requests\n","from bs4 import BeautifulSoup\n","import pandas as pd\n","from time import sleep\n","import os\n","from tqdm import tqdm\n","\n","# 2023년대 노래 시대별차트\n","headers = {\n","    'User-Agent': ('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 '\n","                   '(KHTML, like Gecko) Chrome/68.0.3440.75 Safari/537.36')\n","}\n","\n","age_url = \"https://www.melon.com/chart/age/list.htm\"\n","\n","params = {\n","    'idx': '1',\n","    'chartType': 'YE',     # 10년 단위로 검색하는 부분과 연관\n","    'chartGenre': 'KPOP',  # 가요검색: KPOP, 팝송검색: POP\n","    'chartDate': '2015',   # 검색연도\n","    'moved': 'Y',\n","}\n","\n","response = requests.get(age_url, params=params, headers=headers)\n","soup = BeautifulSoup(response.text, 'html.parser')\n","song_list = soup.select('.lst50, .lst100')\n","\n","# 데이터프레임 초기화\n","columns = ['chartDate', 'rank', 'title', 'singer', 'album_name', 'release_date', 'genre', 'lyric', 'composer', 'lyricist', 'arranger']\n","song_data = pd.DataFrame(columns=columns)\n","\n","# tqdm 라이브러리로 진행 상황 바 표시\n","for i, meta in tqdm(enumerate(song_list, 1), total=len(song_list), desc=\"Processing songs\"):\n","    rank = i\n","    try:\n","        title = meta.select('a[href*=playSong]')[0].text\n","    except:\n","        title = meta.select('.wrap_song_info .ellipsis')[0].text\n","    title = title.strip()\n","\n","    song_id_html = str(meta.select('a[onclick*=SongDetail]'))\n","    matched = re.search(r\"\\'(\\d+)\\'\", song_id_html)\n","    song_id = matched.group(1)\n","    song_url = 'https://www.melon.com/song/detail.htm?songId=' + song_id\n","\n","    response = requests.get(song_url, params=params, headers=headers)\n","    soup = BeautifulSoup(response.text, 'html.parser')\n","\n","    # 가수\n","    singer_html = soup.select('.wrap_info .artist a')\n","    singer_s = ', '.join([html['title'] for html in singer_html if html['title']]) if singer_html else 'Various Artists'\n","\n","    # 앨범명\n","    album_name = soup.select('.list dd')[0].get_text(strip=True)\n","\n","    # 발매날짜\n","    release_date = soup.select('.list dd')[1].get_text(strip=True)\n","\n","    # 장르\n","    genre = soup.select('.list dd')[2].get_text(strip=True)\n","\n","    # 가사\n","    lyric = '없음'\n","    lyric_html = soup.select_one('.section_lyric .wrap_lyric .lyric')\n","    if lyric_html:\n","        lyric = lyric_html.get_text(strip=True, separator='\\n')\n","\n","    # 작사, 작곡, 편곡\n","    member_roles = {'작사': 'lyricist', '작곡': 'composer', '편곡': 'arranger'}\n","    members = {v: '' for k, v in member_roles.items()}\n","    for entry in soup.select('.section_prdcr .list_person .entry'):\n","        role = entry.select_one('.meta').get_text(strip=True)\n","        if role in member_roles:\n","            members[member_roles[role]] = entry.select_one('.artist').get_text(strip=True)\n","\n","    # 데이터프레임에 추가\n","    row = pd.Series([params['chartDate'], rank, title, singer_s, album_name, release_date, genre, lyric, members['composer'], members['lyricist'], members['arranger']], index=song_data.columns)\n","    song_data = pd.concat([song_data, pd.DataFrame([row])], ignore_index=True)\n","\n","    sleep(1)  # IP 차단 방지용\n"]},{"cell_type":"code","source":["song_data\n","song_data.to_csv('2015멜론차트크롤링.csv')"],"metadata":{"id":"UTVd8bY8cTSh","executionInfo":{"status":"ok","timestamp":1717643765611,"user_tz":-540,"elapsed":13,"user":{"displayName":"김민경","userId":"05552883468747004724"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Wnhp6BrKcLwH","executionInfo":{"status":"ok","timestamp":1717642361279,"user_tz":-540,"elapsed":22800,"user":{"displayName":"김민경","userId":"05552883468747004724"}},"outputId":"74758f15-1b38-456f-9e9b-df3631ed9c59"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["import re\n","import requests\n","from bs4 import BeautifulSoup\n","import pandas as pd\n","from time import sleep\n","import os\n","from tqdm import tqdm\n","\n","# 2023년대 노래 시대별차트\n","headers = {\n","    'User-Agent': ('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 '\n","                   '(KHTML, like Gecko) Chrome/68.0.3440.75 Safari/537.36')\n","}\n","\n","age_url = \"https://www.melon.com/chart/age/list.htm\"\n","\n","params = {\n","    'idx': '1',\n","    'chartType': 'YE',     # 10년 단위로 검색하는 부분과 연관\n","    'chartGenre': 'KPOP',  # 가요검색: KPOP, 팝송검색: POP\n","    'chartDate': '2009',   # 검색연도\n","    'moved': 'Y',\n","}\n","\n","response = requests.get(age_url, params=params, headers=headers)\n","soup = BeautifulSoup(response.text, 'html.parser')\n","song_list = soup.select('.lst50, .lst100')\n","\n","# 데이터프레임 초기화\n","columns = ['chartDate', 'rank', 'title', 'singer', 'album_name', 'release_date', 'genre', 'lyric', 'composer', 'lyricist', 'arranger']\n","song_data = pd.DataFrame(columns=columns)\n","\n","# tqdm 라이브러리로 진행 상황 바 표시\n","for i, meta in tqdm(enumerate(song_list, 1), total=len(song_list), desc=\"Processing songs\"):\n","    rank = i\n","    try:\n","        title = meta.select('a[href*=playSong]')[0].text\n","    except:\n","        title = meta.select('.wrap_song_info .ellipsis')[0].text\n","    title = title.strip()\n","\n","    song_id_html = str(meta.select('a[onclick*=SongDetail]'))\n","    matched = re.search(r\"\\'(\\d+)\\'\", song_id_html)\n","    song_id = matched.group(1)\n","    song_url = 'https://www.melon.com/song/detail.htm?songId=' + song_id\n","\n","    response = requests.get(song_url, params=params, headers=headers)\n","    soup = BeautifulSoup(response.text, 'html.parser')\n","\n","    # 가수\n","    singer_html = soup.select('.wrap_info .artist a')\n","    singer_s = ', '.join([html['title'] for html in singer_html if html['title']]) if singer_html else 'Various Artists'\n","\n","    # 앨범명\n","    album_name = soup.select('.list dd')[0].get_text(strip=True)\n","\n","    # 발매날짜\n","    release_date = soup.select('.list dd')[1].get_text(strip=True)\n","\n","    # 장르\n","    genre = soup.select('.list dd')[2].get_text(strip=True)\n","\n","    # 가사\n","    lyric = '없음'\n","    lyric_html = soup.select_one('.section_lyric .wrap_lyric .lyric')\n","    if lyric_html:\n","        lyric = lyric_html.get_text(strip=True, separator='\\n')\n","\n","    # 작사, 작곡, 편곡\n","    member_roles = {'작사': 'lyricist', '작곡': 'composer', '편곡': 'arranger'}\n","    members = {v: '' for k, v in member_roles.items()}\n","    for entry in soup.select('.section_prdcr .list_person .entry'):\n","        role = entry.select_one('.meta').get_text(strip=True)\n","        if role in member_roles:\n","            members[member_roles[role]] = entry.select_one('.artist').get_text(strip=True)\n","\n","    # 데이터프레임에 추가\n","    row = pd.Series([params['chartDate'], rank, title, singer_s, album_name, release_date, genre, lyric, members['composer'], members['lyricist'], members['arranger']], index=song_data.columns)\n","    song_data = pd.concat([song_data, pd.DataFrame([row])], ignore_index=True)\n","\n","    sleep(1)  # IP 차단 방지용\n"],"metadata":{"id":"sqEN9AGNxutq"},"execution_count":null,"outputs":[]}]}